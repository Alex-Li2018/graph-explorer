import { BasicNodesAndRels } from './types';
import { GraphModel } from './models/Graph';
import { GraphStyleModel } from './models/GraphStyle';
import { ForceSimulation } from './layout/force/ForceSimulation';
import { ZoomLimitsReached, ZoomType, GetNodeNeighboursFn, VizItem, LayoutType } from './types';
import { GraphEventHandlerModel, GraphInteraction } from './GraphEventHandlerModel';
import { GraphStats } from './utils/mapper';
import { CircularLayout } from './layout/CircularLayout';
import { GridLayout } from './layout/GridLayout';
declare type MeasureSizeFn = () => {
    width: number;
    height: number;
};
declare type ZoomEvent = (limitsReached: ZoomLimitsReached) => void;
declare type VoidEvent = () => void;
export default class GraphVisualization {
    private measureSize;
    graphData: BasicNodesAndRels;
    isFullscreen: boolean;
    layout: LayoutType;
    wheelZoomRequiresModKey?: boolean | undefined;
    private initialZoomToFit?;
    private readonly root;
    private baseGroup;
    private rect;
    private container;
    private geometry;
    private zoomBehavior;
    private zoomMinScaleExtent;
    private callbacks;
    graph: GraphModel;
    style: GraphStyleModel;
    forceSimulation: ForceSimulation;
    circularlayout: CircularLayout;
    gridLayout: GridLayout;
    private draw;
    private isZoomClick;
    constructor(element: SVGElement, measureSize: MeasureSizeFn, graphData: BasicNodesAndRels, isFullscreen: boolean, layout: LayoutType, onZoomEvent?: ZoomEvent, onDisplayZoomWheelInfoMessage?: VoidEvent, wheelZoomRequiresModKey?: boolean | undefined, initialZoomToFit?: boolean | undefined);
    private initConfig;
    private initGraphData;
    private initStyle;
    private innitContainer;
    private containerZoomEvent;
    initNodeAndRelationship(): void;
    private initLayoutController;
    update(options: {
        updateNodes: boolean;
        updateRelationships: boolean;
        restartSimulation?: boolean;
    }): void;
    private updateNodes;
    private updateRelationships;
    private render;
    zoomByType: (zoomType: ZoomType) => void;
    private zoomToFitViewport;
    private getZoomScaleFactorToFitWholeGraph;
    private adjustZoomMinScaleExtentToFitGraph;
    setInitialZoom(): void;
    precomputeAndStart(): void;
    resize(isFullscreen: boolean, wheelZoomRequiresModKey: boolean | undefined): void;
    boundingBox(): DOMRect | undefined;
    initEventHandler(getNodeNeighbours: GetNodeNeighboursFn, onItemMouseOver: (item: VizItem) => void, onItemSelect: (item: VizItem) => void, onGraphModelChange: (stats: GraphStats) => void, onGraphInteraction: (event: GraphInteraction) => void): GraphEventHandlerModel;
    on: (event: string, callback: (...args: any[]) => void) => this;
    trigger: (event: string, ...args: any[]) => void;
    cricularLayoutHandler(): void;
    forceSimulationHandler(): void;
    gridLayoutHandler(): void;
}
export {};
